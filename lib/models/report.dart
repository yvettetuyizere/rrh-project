import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:json_annotation/json_annotation.dart';

part 'report.g.dart';

class TimestampConverter implements JsonConverter<Timestamp, Object> {
  const TimestampConverter();

  @override
  Timestamp fromJson(Object json) {
    if (json is Timestamp) return json;
    if (json is Map<String, dynamic>) {
      return Timestamp(json['seconds'], json['nanoseconds']);
    }
    throw Exception('Cannot convert $json to Timestamp');
  }

  @override
  Object toJson(Timestamp object) => object;
}

@JsonSerializable()
class Report {
  final String? id;
  final String title;
  final String description;
  final String userId;

  @TimestampConverter()
  final Timestamp createdAt;

  final String? imageUrl;
  final String? fileUrl;
  final bool isApproved;
  final String? approvedBy;

  @TimestampConverter()
  final Timestamp? approvedAt;

  final String type;
  final String severity;
  final double latitude;
  final double longitude;
  final String status;

  Report({
    this.id,
    required this.title,
    required this.description,
    required this.userId,
    required this.createdAt,
    this.imageUrl,
    this.fileUrl,
    this.isApproved = false,
    this.approvedBy,
    this.approvedAt,
    required this.type,
    required this.severity,
    required this.latitude,
    required this.longitude,
    this.status = 'pending',
  });

  // JSON serialization methods (generated by json_serializable)
  factory Report.fromJson(Map<String, dynamic> json) => _$ReportFromJson(json);

  Map<String, dynamic> toJson() => _$ReportToJson(this);

  // NEW: Create a Report instance from Firestore DocumentSnapshot
  factory Report.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return Report.fromJson({
      'id': doc.id,
      ...data,
    });
  }

  // NEW: Convert Report instance to a Firestore compatible Map
  Map<String, dynamic> toFirestore() {
    final json = toJson();
    json.remove('id'); // Firestore stores ID separately
    return json;
  }

  // NEW: copyWith method for immutability
  Report copyWith({
    String? id,
    String? title,
    String? description,
    String? userId,
    Timestamp? createdAt,
    String? imageUrl,
    String? fileUrl,
    bool? isApproved,
    String? approvedBy,
    Timestamp? approvedAt,
    String? type,
    String? severity,
    double? latitude,
    double? longitude,
    String? status,
  }) {
    return Report(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      userId: userId ?? this.userId,
      createdAt: createdAt ?? this.createdAt,
      imageUrl: imageUrl ?? this.imageUrl,
      fileUrl: fileUrl ?? this.fileUrl,
      isApproved: isApproved ?? this.isApproved,
      approvedBy: approvedBy ?? this.approvedBy,
      approvedAt: approvedAt ?? this.approvedAt,
      type: type ?? this.type,
      severity: severity ?? this.severity,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      status: status ?? this.status,
    );
  }
}
